
real_time_clock_ATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800076  00800076  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000879  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f9  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e5       	ldi	r30, 0x5E	; 94
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 37       	cpi	r26, 0x7E	; 126
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fd d0       	rcall	.+506    	; 0x254 <main>
  5a:	7f c1       	rjmp	.+766    	; 0x35a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_3>:
unsigned char point = 1;



ISR (TIMER2_COMP_vect) //Вектор прерывания для ТС2. инкриментируем переменную seconds каждый заход в вектор до тех пор пока она не будет больше 60
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	af 93       	push	r26
  6e:	bf 93       	push	r27
	second ++; //Данная переменная хранит общее количество секунд. Раз всекунду происходит инкремент переменной
  70:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <second>
  74:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second+0x1>
  78:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <second+0x2>
  7c:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <second+0x3>
  80:	01 96       	adiw	r24, 0x01	; 1
  82:	a1 1d       	adc	r26, r1
  84:	b1 1d       	adc	r27, r1
  86:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <second>
  8a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <second+0x1>
  8e:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <second+0x2>
  92:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <second+0x3>
	
	//PORTC ^= 1<<PC5;
	
	if (point != 1) //С помощью данной конструкции if зажигаем раз в секнду точку на втором семисегментном индикаторе
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	21 f0       	breq	.+8      	; 0xa6 <__vector_3+0x48>
	{
		point = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  a4:	03 c0       	rjmp	.+6      	; 0xac <__vector_3+0x4e>
	}
	else point = 2;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <setup_ports>:

/*********************Функция настройки портов ввода вывода*****************************/

void setup_ports (void) //Начало функции
{
	    PORTB &= ~((1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0));
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 7c       	andi	r24, 0xC0	; 192
  c2:	88 bb       	out	0x18, r24	; 24
	    DDRB |= (1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	8f 63       	ori	r24, 0x3F	; 63
  c8:	87 bb       	out	0x17, r24	; 23
	    
	    PORTD = 0x00;
  ca:	12 ba       	out	0x12, r1	; 18
	    DDRD = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 bb       	out	0x11, r24	; 17
	    
	    PORTC |= (1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	8f 61       	ori	r24, 0x1F	; 31
  d4:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<PC5);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	85 bb       	out	0x15, r24	; 21
	    DDRC &= ~((1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0));
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	80 7e       	andi	r24, 0xE0	; 224
  e0:	84 bb       	out	0x14, r24	; 20
		DDRC |= (1<<PC5);
  e2:	84 b3       	in	r24, 0x14	; 20
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	84 bb       	out	0x14, r24	; 20
  e8:	08 95       	ret

000000ea <PCK_mode_T2>:

/*********************Функция настройки второго таймра / счетчика на асинхронный режим работы*****************************/

void PCK_mode_T2 (void) //Начало функции
{
	asm("cli"); // Глобальный запрет прерываний
  ea:	f8 94       	cli
	
	ASSR |= (1<<AS2); // Активация асинхронного режима ТС2
  ec:	82 b5       	in	r24, 0x22	; 34
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	82 bd       	out	0x22, r24	; 34
	
	while(ASSR != (0b00001000)) // Проверка состояния битов регистра ASSR для безопасной записи данных в остальные регистры ТС2. Все биты кроме 4-го должны быть в ноле
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <PCK_mode_T2+0xc>
	
	{
		asm("nop"); // Повисаем в цикле пока биты в регистре ASSR не примут требуемое состояние. 
  f4:	00 00       	nop
{
	asm("cli"); // Глобальный запрет прерываний
	
	ASSR |= (1<<AS2); // Активация асинхронного режима ТС2
	
	while(ASSR != (0b00001000)) // Проверка состояния битов регистра ASSR для безопасной записи данных в остальные регистры ТС2. Все биты кроме 4-го должны быть в ноле
  f6:	82 b5       	in	r24, 0x22	; 34
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	e1 f7       	brne	.-8      	; 0xf4 <PCK_mode_T2+0xa>
	
	{
		asm("nop"); // Повисаем в цикле пока биты в регистре ASSR не примут требуемое состояние. 
	}
	
	TCCR2 |= (1<<WGM21); // Режим СТС. Сброс при совпадении
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM20);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS22)|(1<<CS20); // Делитель таймера 256 для получения интервала в 1 секунду
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	85 60       	ori	r24, 0x05	; 5
 10c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255; // Чило для регистра сравнения. При совпадении с которым программа перейдет в вектор прерывания
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2); // Разрешение прерывания
 112:	89 b7       	in	r24, 0x39	; 57
 114:	80 68       	ori	r24, 0x80	; 128
 116:	89 bf       	out	0x39, r24	; 57
	TIFR = 0; // Сброс флагов прерывания
 118:	18 be       	out	0x38, r1	; 56
	SFIOR |= (1<<PSR2); // Обнуление предделителя
 11a:	80 b7       	in	r24, 0x30	; 48
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 bf       	out	0x30, r24	; 48
	TCNT2 = 0; // Сброс счетного регистра
 120:	14 bc       	out	0x24, r1	; 36
	
	
	asm("sei"); // Глобальное разрешение прерываний
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <hours>:
} //Конец функции

/**************************Функция расчитывает минуты из накопленных секунд***********************************/
int hours (unsigned long h) //Начало функции
{
	h = ((h / 60) / 60);
 126:	20 e1       	ldi	r18, 0x10	; 16
 128:	3e e0       	ldi	r19, 0x0E	; 14
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	f3 d0       	rcall	.+486    	; 0x316 <__udivmodsi4>
	return h;
} //Конец функции
 130:	c9 01       	movw	r24, r18
 132:	08 95       	ret

00000134 <minutes>:


/**************************Функция расчитывает часы из накопленных секунд***********************************/
int minutes (unsigned long m) //Начало функции
{
 134:	cf 92       	push	r12
 136:	df 92       	push	r13
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
	m = ((m / 60) % 60);
 13c:	0f 2e       	mov	r0, r31
 13e:	fc e3       	ldi	r31, 0x3C	; 60
 140:	cf 2e       	mov	r12, r31
 142:	d1 2c       	mov	r13, r1
 144:	e1 2c       	mov	r14, r1
 146:	f1 2c       	mov	r15, r1
 148:	f0 2d       	mov	r31, r0
 14a:	a7 01       	movw	r20, r14
 14c:	96 01       	movw	r18, r12
 14e:	e3 d0       	rcall	.+454    	; 0x316 <__udivmodsi4>
 150:	ca 01       	movw	r24, r20
 152:	b9 01       	movw	r22, r18
 154:	a7 01       	movw	r20, r14
 156:	96 01       	movw	r18, r12
 158:	de d0       	rcall	.+444    	; 0x316 <__udivmodsi4>
	
	return m;
}//Конец функции
 15a:	cb 01       	movw	r24, r22
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	08 95       	ret

00000166 <razbika>:


/**************************Функция разбивает числа на цифры***********************************/
void razbika (unsigned long chislo_1, unsigned long chislo_2) //Начало функции
{
 166:	8f 92       	push	r8
 168:	9f 92       	push	r9
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	49 01       	movw	r8, r18
 178:	5a 01       	movw	r10, r20
	segment_1 = chislo_1 % 10;
 17a:	0f 2e       	mov	r0, r31
 17c:	fa e0       	ldi	r31, 0x0A	; 10
 17e:	cf 2e       	mov	r12, r31
 180:	d1 2c       	mov	r13, r1
 182:	e1 2c       	mov	r14, r1
 184:	f1 2c       	mov	r15, r1
 186:	f0 2d       	mov	r31, r0
 188:	a7 01       	movw	r20, r14
 18a:	96 01       	movw	r18, r12
 18c:	c4 d0       	rcall	.+392    	; 0x316 <__udivmodsi4>
 18e:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <segment_1>
	segment_2 = chislo_1 / 10;
 192:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <segment_2>
	
	segment_3 = chislo_2 % 10;
 196:	c5 01       	movw	r24, r10
 198:	b4 01       	movw	r22, r8
 19a:	a7 01       	movw	r20, r14
 19c:	96 01       	movw	r18, r12
 19e:	bb d0       	rcall	.+374    	; 0x316 <__udivmodsi4>
 1a0:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <segment_3>
	segment_4 = chislo_2 / 10;
 1a4:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__data_end>
} //Конец функции
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	df 90       	pop	r13
 1ae:	cf 90       	pop	r12
 1b0:	bf 90       	pop	r11
 1b2:	af 90       	pop	r10
 1b4:	9f 90       	pop	r9
 1b6:	8f 90       	pop	r8
 1b8:	08 95       	ret

000001ba <_7SEG_indikator>:


/**************************Функция вывода времени на семисегментные индикаторы***********************************/
void _7SEG_indikator (void) //Начало функции
{
			PORTD = 0x00; //Четвертая цифра
 1ba:	12 ba       	out	0x12, r1	; 18
			PORTD = number[segment_1];
 1bc:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <segment_1>
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e5 59       	subi	r30, 0x95	; 149
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	80 81       	ld	r24, Z
 1c8:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b1000;
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8f ec       	ldi	r24, 0xCF	; 207
 1d0:	97 e0       	ldi	r25, 0x07	; 7
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_7SEG_indikator+0x18>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <_7SEG_indikator+0x1e>
 1d8:	00 00       	nop
			_delay_ms(blink_led);
			
			PORTD = 0x00; //Третья цифра
 1da:	12 ba       	out	0x12, r1	; 18
			PORTD = number[segment_2];
 1dc:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <segment_2>
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	e5 59       	subi	r30, 0x95	; 149
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	80 81       	ld	r24, Z
 1e8:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b0100;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_7SEG_indikator+0x38>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_7SEG_indikator+0x3e>
 1f8:	00 00       	nop
			_delay_ms(blink_led);
			
			PORTD = 0x00; //Вторая цифра без точки
 1fa:	12 ba       	out	0x12, r1	; 18
			if (point == 1)
 1fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	41 f4       	brne	.+16     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
			{
				PORTD = number[segment_3];
 204:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <segment_3>
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e5 59       	subi	r30, 0x95	; 149
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	80 81       	ld	r24, Z
 210:	82 bb       	out	0x12, r24	; 18
 212:	07 c0       	rjmp	.+14     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			
			else  {PORTD = number_point[segment_3];}
 214:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <segment_3>
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ef 59       	subi	r30, 0x9F	; 159
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b0010; //Вторая цифра с точкой
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	88 bb       	out	0x18, r24	; 24
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 230:	00 00       	nop
			_delay_ms(blink_led);
			
			PORTD = 0x00; //Первая цифра
 232:	12 ba       	out	0x12, r1	; 18
			PORTD = number[segment_4];
 234:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__data_end>
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e5 59       	subi	r30, 0x95	; 149
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	80 81       	ld	r24, Z
 240:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b0001;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	88 bb       	out	0x18, r24	; 24
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	97 e0       	ldi	r25, 0x07	; 7
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 250:	00 00       	nop
 252:	08 95       	ret

00000254 <main>:


int main(void) // Начало основной функции main
{

	setup_ports(); // Настройка портов ввода / вывода
 254:	34 df       	rcall	.-408    	; 0xbe <setup_ports>
	
	PCK_mode_T2(); // Настройка T2 в асинхронный режим
 256:	49 df       	rcall	.-366    	; 0xea <PCK_mode_T2>
	
    while (1) //Начало основного цикла
    {
		razbika(minutes(second), hours(second)); //В данную функцию передаем накопленные секунды для пересчета их в часы и минуты
 258:	c0 90 7a 00 	lds	r12, 0x007A	; 0x80007a <second>
 25c:	d0 90 7b 00 	lds	r13, 0x007B	; 0x80007b <second+0x1>
 260:	e0 90 7c 00 	lds	r14, 0x007C	; 0x80007c <second+0x2>
 264:	f0 90 7d 00 	lds	r15, 0x007D	; 0x80007d <second+0x3>
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	5c df       	rcall	.-328    	; 0x126 <hours>
 26e:	ec 01       	movw	r28, r24
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	5f df       	rcall	.-322    	; 0x134 <minutes>
 276:	9e 01       	movw	r18, r28
 278:	dd 0f       	add	r29, r29
 27a:	44 0b       	sbc	r20, r20
 27c:	55 0b       	sbc	r21, r21
 27e:	bc 01       	movw	r22, r24
 280:	99 0f       	add	r25, r25
 282:	88 0b       	sbc	r24, r24
 284:	99 0b       	sbc	r25, r25
 286:	6f df       	rcall	.-290    	; 0x166 <razbika>
		
		_7SEG_indikator(); //Функция вывода времени на семисегментный индикатор
 288:	98 df       	rcall	.-208    	; 0x1ba <_7SEG_indikator>
		
		if (~PINC & (1<<PC1)) // Начало настройки часов. Нажатие на кнопку добавляет по одному часу
 28a:	99 99       	sbic	0x13, 1	; 19
 28c:	16 c0       	rjmp	.+44     	; 0x2ba <main+0x66>
		{
			second = second + 3600;
 28e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <second>
 292:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second+0x1>
 296:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <second+0x2>
 29a:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <second+0x3>
 29e:	80 5f       	subi	r24, 0xF0	; 240
 2a0:	91 4f       	sbci	r25, 0xF1	; 241
 2a2:	af 4f       	sbci	r26, 0xFF	; 255
 2a4:	bf 4f       	sbci	r27, 0xFF	; 255
 2a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <second>
 2aa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <second+0x1>
 2ae:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <second+0x2>
 2b2:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <second+0x3>
			
			while(~PINC & (1<<PC1));
 2b6:	99 9b       	sbis	0x13, 1	; 19
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <main+0x62>
		} // Конец настройки часов
		
		if (~PINC & (1<<PC2)) // Начало настройки минут. Нажати на кнопку добавляет по одной минуте
 2ba:	9a 99       	sbic	0x13, 2	; 19
 2bc:	15 c0       	rjmp	.+42     	; 0x2e8 <main+0x94>
		{
			second = second + 60;
 2be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <second>
 2c2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second+0x1>
 2c6:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <second+0x2>
 2ca:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <second+0x3>
 2ce:	cc 96       	adiw	r24, 0x3c	; 60
 2d0:	a1 1d       	adc	r26, r1
 2d2:	b1 1d       	adc	r27, r1
 2d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <second>
 2d8:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <second+0x1>
 2dc:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <second+0x2>
 2e0:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <second+0x3>
			
			while(~PINC & (1<<PC2));
 2e4:	9a 9b       	sbis	0x13, 2	; 19
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <main+0x90>
		} // Конец настройки минут
		
		if (second > 86400) // В сутках 86400 секунд. При переполнении сбрасываем секнды в ноль. 
 2e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <second>
 2ec:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <second+0x1>
 2f0:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <second+0x2>
 2f4:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <second+0x3>
 2f8:	81 38       	cpi	r24, 0x81	; 129
 2fa:	91 45       	sbci	r25, 0x51	; 81
 2fc:	a1 40       	sbci	r26, 0x01	; 1
 2fe:	b1 05       	cpc	r27, r1
 300:	08 f4       	brcc	.+2      	; 0x304 <main+0xb0>
 302:	aa cf       	rjmp	.-172    	; 0x258 <main+0x4>
		{
			second = 0;
 304:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <second>
 308:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <second+0x1>
 30c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <second+0x2>
 310:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <second+0x3>
 314:	a1 cf       	rjmp	.-190    	; 0x258 <main+0x4>

00000316 <__udivmodsi4>:
 316:	a1 e2       	ldi	r26, 0x21	; 33
 318:	1a 2e       	mov	r1, r26
 31a:	aa 1b       	sub	r26, r26
 31c:	bb 1b       	sub	r27, r27
 31e:	fd 01       	movw	r30, r26
 320:	0d c0       	rjmp	.+26     	; 0x33c <__udivmodsi4_ep>

00000322 <__udivmodsi4_loop>:
 322:	aa 1f       	adc	r26, r26
 324:	bb 1f       	adc	r27, r27
 326:	ee 1f       	adc	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	a2 17       	cp	r26, r18
 32c:	b3 07       	cpc	r27, r19
 32e:	e4 07       	cpc	r30, r20
 330:	f5 07       	cpc	r31, r21
 332:	20 f0       	brcs	.+8      	; 0x33c <__udivmodsi4_ep>
 334:	a2 1b       	sub	r26, r18
 336:	b3 0b       	sbc	r27, r19
 338:	e4 0b       	sbc	r30, r20
 33a:	f5 0b       	sbc	r31, r21

0000033c <__udivmodsi4_ep>:
 33c:	66 1f       	adc	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 1f       	adc	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	1a 94       	dec	r1
 346:	69 f7       	brne	.-38     	; 0x322 <__udivmodsi4_loop>
 348:	60 95       	com	r22
 34a:	70 95       	com	r23
 34c:	80 95       	com	r24
 34e:	90 95       	com	r25
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	bd 01       	movw	r22, r26
 356:	cf 01       	movw	r24, r30
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>


real_time_clock_ATmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800076  00800076  000004ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080a  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a5  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045f  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ac  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2b c0       	rjmp	.+86     	; 0x5e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	a4 c1       	rjmp	.+840    	; 0x35c <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e0       	ldi	r30, 0x04	; 4
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 37       	cpi	r26, 0x76	; 118
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e7       	ldi	r26, 0x76	; 118
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 38       	cpi	r26, 0x80	; 128
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	fe d0       	rcall	.+508    	; 0x256 <main>
  5a:	d2 c1       	rjmp	.+932    	; 0x400 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_3>:
	
	TCNT0 = number_TCNT0; //Записываем число 178 в регистр TCNT0, для получения интервала 2мс. Это интервал срабатывания прерывания по переполнению ТС0
}

ISR (TIMER2_COMP_vect) //Вектор прерывания для ТС2. инкриментируем переменную seconds каждый заход в вектор до тех пор пока она не будет больше 60
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	af 93       	push	r26
  6e:	bf 93       	push	r27
	second ++; //Данная переменная хранит общее количество секунд. Раз всекунду происходит инкремент переменной
  70:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <second>
  74:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <second+0x1>
  78:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <second+0x2>
  7c:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <second+0x3>
  80:	01 96       	adiw	r24, 0x01	; 1
  82:	a1 1d       	adc	r26, r1
  84:	b1 1d       	adc	r27, r1
  86:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <second>
  8a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <second+0x1>
  8e:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <second+0x2>
  92:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <second+0x3>
	
	if (point != 1) //С помощью данной конструкции if зажигаем раз в секнду точку на втором семисегментном индикаторе
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	21 f0       	breq	.+8      	; 0xa6 <__vector_3+0x48>
	{
		point = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	03 c0       	rjmp	.+6      	; 0xac <__vector_3+0x4e>
	}
	else point = 2;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <setup_ports>:

/*********************Функция настройки портов ввода вывода*****************************/

void setup_ports (void) //Начало функции
{
	    PORTB &= ~((1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0));
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 7c       	andi	r24, 0xC0	; 192
  c2:	88 bb       	out	0x18, r24	; 24
	    DDRB |= (1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB1)|(1<<PB0);
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	8f 63       	ori	r24, 0x3F	; 63
  c8:	87 bb       	out	0x17, r24	; 23
	    
	    PORTD = 0x00;
  ca:	12 ba       	out	0x12, r1	; 18
	    DDRD = 0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 bb       	out	0x11, r24	; 17
	    
	    PORTC |= (1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0);
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	8f 61       	ori	r24, 0x1F	; 31
  d4:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<PC5);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	85 bb       	out	0x15, r24	; 21
	    DDRC &= ~((1<<PC4)|(1<<PC3)|(1<<PC2)|(1<<PC1)|(1<<PC0));
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	80 7e       	andi	r24, 0xE0	; 224
  e0:	84 bb       	out	0x14, r24	; 20
		DDRC |= (1<<PC5);
  e2:	84 b3       	in	r24, 0x14	; 20
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	84 bb       	out	0x14, r24	; 20
  e8:	08 95       	ret

000000ea <TC0_setup>:
} //Конец функции

/**************************Функция настрйки ТС0***********************************/
void TC0_setup (void) //Начало функции
{
	TCCR0 |= (1<<CS02); //Предделитеь настроен на 256
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0); // Разрешаем прерывание на переполнению
  f0:	89 b7       	in	r24, 0x39	; 57
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	89 bf       	out	0x39, r24	; 57
	TCNT0 = number_TCNT0; //Число в регистре с которого начинается счет чтобы получить 2мс
  f6:	81 ee       	ldi	r24, 0xE1	; 225
  f8:	82 bf       	out	0x32, r24	; 50
  fa:	08 95       	ret

000000fc <PCK_mode_T2>:
} //Конец функции

/*********************Функция настройки второго таймра / счетчика на асинхронный режим работы*****************************/
void PCK_mode_T2 (void) //Начало функции
{
	asm("cli"); // Глобальный запрет прерываний
  fc:	f8 94       	cli
	
	ASSR |= (1<<AS2); // Активация асинхронного режима ТС2
  fe:	82 b5       	in	r24, 0x22	; 34
 100:	88 60       	ori	r24, 0x08	; 8
 102:	82 bd       	out	0x22, r24	; 34
	
	while(ASSR != (0b00001000)) // Проверка состояния битов регистра ASSR для безопасной записи данных в остальные регистры ТС2. Все биты кроме 4-го должны быть в ноле
 104:	01 c0       	rjmp	.+2      	; 0x108 <PCK_mode_T2+0xc>
	
	{
		asm("nop"); // Повисаем в цикле пока биты в регистре ASSR не примут требуемое состояние. 
 106:	00 00       	nop
{
	asm("cli"); // Глобальный запрет прерываний
	
	ASSR |= (1<<AS2); // Активация асинхронного режима ТС2
	
	while(ASSR != (0b00001000)) // Проверка состояния битов регистра ASSR для безопасной записи данных в остальные регистры ТС2. Все биты кроме 4-го должны быть в ноле
 108:	82 b5       	in	r24, 0x22	; 34
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	e1 f7       	brne	.-8      	; 0x106 <PCK_mode_T2+0xa>
	
	{
		asm("nop"); // Повисаем в цикле пока биты в регистре ASSR не примут требуемое состояние. 
	}
	
	TCCR2 |= (1<<WGM21); // Режим СТС. Сброс при совпадении
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	88 60       	ori	r24, 0x08	; 8
 112:	85 bd       	out	0x25, r24	; 37
	TCCR2 &= ~(1<<WGM20);
 114:	85 b5       	in	r24, 0x25	; 37
 116:	8f 7b       	andi	r24, 0xBF	; 191
 118:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1<<CS22)|(1<<CS20); // Делитель таймера 256 для получения интервала в 1 секунду
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 255; // Чило для регистра сравнения. При совпадении с которым программа перейдет в вектор прерывания
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2); // Разрешение прерывания
 124:	89 b7       	in	r24, 0x39	; 57
 126:	80 68       	ori	r24, 0x80	; 128
 128:	89 bf       	out	0x39, r24	; 57
	TIFR = 0; // Сброс флагов прерывания
 12a:	18 be       	out	0x38, r1	; 56
	SFIOR |= (1<<PSR2); // Обнуление предделителя
 12c:	80 b7       	in	r24, 0x30	; 48
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 bf       	out	0x30, r24	; 48
	TCNT2 = 0; // Сброс счетного регистра
 132:	14 bc       	out	0x24, r1	; 36
	
	asm("sei"); // Глобальное разрешение прерываний
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <hours>:
} //Конец функции

/**************************Функция расчитывает минуты из накопленных секунд***********************************/
int hours (unsigned long h) //Начало функции
{
	h = ((h / 60) / 60);
 138:	20 e1       	ldi	r18, 0x10	; 16
 13a:	3e e0       	ldi	r19, 0x0E	; 14
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	3d d1       	rcall	.+634    	; 0x3bc <__udivmodsi4>
	return h;
} //Конец функции
 142:	c9 01       	movw	r24, r18
 144:	08 95       	ret

00000146 <minutes>:

/**************************Функция расчитывает часы из накопленных секунд***********************************/
int minutes (unsigned long m) //Начало функции
{
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
	m = ((m / 60) % 60);
 14e:	0f 2e       	mov	r0, r31
 150:	fc e3       	ldi	r31, 0x3C	; 60
 152:	cf 2e       	mov	r12, r31
 154:	d1 2c       	mov	r13, r1
 156:	e1 2c       	mov	r14, r1
 158:	f1 2c       	mov	r15, r1
 15a:	f0 2d       	mov	r31, r0
 15c:	a7 01       	movw	r20, r14
 15e:	96 01       	movw	r18, r12
 160:	2d d1       	rcall	.+602    	; 0x3bc <__udivmodsi4>
 162:	ca 01       	movw	r24, r20
 164:	b9 01       	movw	r22, r18
 166:	a7 01       	movw	r20, r14
 168:	96 01       	movw	r18, r12
 16a:	28 d1       	rcall	.+592    	; 0x3bc <__udivmodsi4>
	
	return m;
}//Конец функции
 16c:	cb 01       	movw	r24, r22
 16e:	ff 90       	pop	r15
 170:	ef 90       	pop	r14
 172:	df 90       	pop	r13
 174:	cf 90       	pop	r12
 176:	08 95       	ret

00000178 <razbika>:

/**************************Функция разбивает числа на цифры***********************************/
void razbika (unsigned long chislo_1, unsigned long chislo_2) //Начало функции
{
 178:	8f 92       	push	r8
 17a:	9f 92       	push	r9
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	49 01       	movw	r8, r18
 18a:	5a 01       	movw	r10, r20
	segment_1 = chislo_1 % 10;
 18c:	0f 2e       	mov	r0, r31
 18e:	fa e0       	ldi	r31, 0x0A	; 10
 190:	cf 2e       	mov	r12, r31
 192:	d1 2c       	mov	r13, r1
 194:	e1 2c       	mov	r14, r1
 196:	f1 2c       	mov	r15, r1
 198:	f0 2d       	mov	r31, r0
 19a:	a7 01       	movw	r20, r14
 19c:	96 01       	movw	r18, r12
 19e:	0e d1       	rcall	.+540    	; 0x3bc <__udivmodsi4>
 1a0:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <segment_1>
	segment_2 = chislo_1 / 10;
 1a4:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <segment_2>
	
	segment_3 = chislo_2 % 10;
 1a8:	c5 01       	movw	r24, r10
 1aa:	b4 01       	movw	r22, r8
 1ac:	a7 01       	movw	r20, r14
 1ae:	96 01       	movw	r18, r12
 1b0:	05 d1       	rcall	.+522    	; 0x3bc <__udivmodsi4>
 1b2:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <segment_3>
	segment_4 = chislo_2 / 10;
 1b6:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <segment_4>
} //Конец функции
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	df 90       	pop	r13
 1c0:	cf 90       	pop	r12
 1c2:	bf 90       	pop	r11
 1c4:	af 90       	pop	r10
 1c6:	9f 90       	pop	r9
 1c8:	8f 90       	pop	r8
 1ca:	08 95       	ret

000001cc <_7SEG_indikator>:

/**************************Функция вывода времени на семисегментные индикаторы***********************************/
void _7SEG_indikator (void) //Начало функции
{
	switch (segment_number) //Начало оператора switсh
 1cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <segment_number>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <_7SEG_indikator+0x30>
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <_7SEG_indikator+0x10>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <_7SEG_indikator+0x1a>
 1da:	08 95       	ret
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	c9 f0       	breq	.+50     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	71 f1       	breq	.+92     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 1e4:	08 95       	ret
	{
		case 1: 
			PORTD = 0x00; //Четвертая цифра
 1e6:	12 ba       	out	0x12, r1	; 18
 			PORTD = number[segment_1];
 1e8:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <segment_1>
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	e4 59       	subi	r30, 0x94	; 148
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	82 bb       	out	0x12, r24	; 18
 			PORTB = 0b1000;
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	88 bb       	out	0x18, r24	; 24
			break;
 1fa:	08 95       	ret
			 
		case 2:
			PORTD = 0x00; //Третья цифра
 1fc:	12 ba       	out	0x12, r1	; 18
			PORTD = number[segment_2];
 1fe:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <segment_2>
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	e4 59       	subi	r30, 0x94	; 148
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b0100;
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	88 bb       	out	0x18, r24	; 24
			break;
 210:	08 95       	ret
						
		case 3:
			PORTD = 0x00; //Вторая цифра без точки
 212:	12 ba       	out	0x12, r1	; 18
			
			if (point == 1)
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	41 f4       	brne	.+16     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				PORTD = number[segment_3];
 21c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <segment_3>
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e4 59       	subi	r30, 0x94	; 148
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	82 bb       	out	0x12, r24	; 18
 22a:	07 c0       	rjmp	.+14     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
			}
			else PORTD = number_point[segment_3];
 22c:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <segment_3>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ee 59       	subi	r30, 0x9E	; 158
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	80 81       	ld	r24, Z
 238:	82 bb       	out	0x12, r24	; 18

			PORTB = 0b0010; //Вторая цифра с точкой
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	88 bb       	out	0x18, r24	; 24
			break;
 23e:	08 95       	ret
						
		case 4:
			PORTD = 0x00; //Первая цифра
 240:	12 ba       	out	0x12, r1	; 18
			PORTD = number[segment_4];
 242:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <segment_4>
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e4 59       	subi	r30, 0x94	; 148
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	80 81       	ld	r24, Z
 24e:	82 bb       	out	0x12, r24	; 18
			PORTB = 0b0001;	
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret

00000256 <main>:
}

int main(void) // Начало основной функции main
{

	setup_ports(); // Настройка портов ввода / вывода
 256:	33 df       	rcall	.-410    	; 0xbe <setup_ports>
	
	PCK_mode_T2(); // Настройка T2 в асинхронный режим
 258:	51 df       	rcall	.-350    	; 0xfc <PCK_mode_T2>
	
	TC0_setup(); // Запуск ТС0
 25a:	47 df       	rcall	.-370    	; 0xea <TC0_setup>
	
    while (1) //Начало основного цикла
    {
		razbika(minutes(second), hours(second)); //В данную функцию передаем накопленные секунды для пересчета их в часы и минуты
 25c:	c0 90 7c 00 	lds	r12, 0x007C	; 0x80007c <second>
 260:	d0 90 7d 00 	lds	r13, 0x007D	; 0x80007d <second+0x1>
 264:	e0 90 7e 00 	lds	r14, 0x007E	; 0x80007e <second+0x2>
 268:	f0 90 7f 00 	lds	r15, 0x007F	; 0x80007f <second+0x3>
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	63 df       	rcall	.-314    	; 0x138 <hours>
 272:	ec 01       	movw	r28, r24
 274:	c7 01       	movw	r24, r14
 276:	b6 01       	movw	r22, r12
 278:	66 df       	rcall	.-308    	; 0x146 <minutes>
 27a:	9e 01       	movw	r18, r28
 27c:	dd 0f       	add	r29, r29
 27e:	44 0b       	sbc	r20, r20
 280:	55 0b       	sbc	r21, r21
 282:	bc 01       	movw	r22, r24
 284:	99 0f       	add	r25, r25
 286:	88 0b       	sbc	r24, r24
 288:	99 0b       	sbc	r25, r25
 28a:	76 df       	rcall	.-276    	; 0x178 <razbika>
		
		_7SEG_indikator(); //Функция вывода времени на семисегментный индикатор
 28c:	9f df       	rcall	.-194    	; 0x1cc <_7SEG_indikator>
		
		if (second > 86400) // В сутках 86400 секунд. При переполнении сбрасываем секнды в ноль. 
 28e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <second>
 292:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <second+0x1>
 296:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <second+0x2>
 29a:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <second+0x3>
 29e:	81 38       	cpi	r24, 0x81	; 129
 2a0:	91 45       	sbci	r25, 0x51	; 81
 2a2:	a1 40       	sbci	r26, 0x01	; 1
 2a4:	b1 05       	cpc	r27, r1
 2a6:	d0 f2       	brcs	.-76     	; 0x25c <main+0x6>
		{
			second = 0;
 2a8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <second>
 2ac:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <second+0x1>
 2b0:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <second+0x2>
 2b4:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <second+0x3>
 2b8:	d1 cf       	rjmp	.-94     	; 0x25c <main+0x6>

000002ba <button>:
} //Конец функции

/**************************Функция обработки кнопок настройки часов***********************************/
void button (void) //Начало функции
{
	if (button_hour == button_delay) // Начало настройки часов. Нажатие на кнопку добавляет по одному часу
 2ba:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <button_hour>
 2be:	88 37       	cpi	r24, 0x78	; 120
 2c0:	a1 f4       	brne	.+40     	; 0x2ea <button+0x30>
	{
		second = second + 3600;
 2c2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <second>
 2c6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <second+0x1>
 2ca:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <second+0x2>
 2ce:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <second+0x3>
 2d2:	80 5f       	subi	r24, 0xF0	; 240
 2d4:	91 4f       	sbci	r25, 0xF1	; 241
 2d6:	af 4f       	sbci	r26, 0xFF	; 255
 2d8:	bf 4f       	sbci	r27, 0xFF	; 255
 2da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <second>
 2de:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <second+0x1>
 2e2:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <second+0x2>
 2e6:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <second+0x3>
	} // Конец настройки часов
	
	if (button_minute == button_delay) // Начало настройки минут. Нажати на кнопку добавляет по одной минуте
 2ea:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 2ee:	88 37       	cpi	r24, 0x78	; 120
 2f0:	99 f4       	brne	.+38     	; 0x318 <button+0x5e>
	{
		second = second + 60;
 2f2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <second>
 2f6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <second+0x1>
 2fa:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <second+0x2>
 2fe:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <second+0x3>
 302:	cc 96       	adiw	r24, 0x3c	; 60
 304:	a1 1d       	adc	r26, r1
 306:	b1 1d       	adc	r27, r1
 308:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <second>
 30c:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <second+0x1>
 310:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <second+0x2>
 314:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <second+0x3>
 318:	08 95       	ret

0000031a <button_touch_delay>:
} //Конец функции

/**************************Функция реализует задержку смены цифры при настройке "Часов" и "Минут"***********************************/
void button_touch_delay (void) //Начало функции
{
		if (~PINC & (1<<PC1)) //Задержка срабатывания кнопки, настройки "Часов"
 31a:	99 99       	sbic	0x13, 1	; 19
 31c:	06 c0       	rjmp	.+12     	; 0x32a <button_touch_delay+0x10>
		{
			button_hour ++; //Переменнах хоанит задержку для настройки "Часов"
 31e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <button_hour>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <button_hour>
 328:	02 c0       	rjmp	.+4      	; 0x32e <button_touch_delay+0x14>
		}
		else button_hour = 0;
 32a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <button_hour>
		
		if (button_hour > button_delay)  //Обнуление переменной хранящей задержку "Часов" если кнопка настройки не нажата 
 32e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <button_hour>
 332:	89 37       	cpi	r24, 0x79	; 121
 334:	10 f0       	brcs	.+4      	; 0x33a <button_touch_delay+0x20>
		{
			button_hour = 0;
 336:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <button_hour>
		}
		
		if (~PINC & (1<<PC2)) //Задержка срабатывания кнопки, настройки "Минут"
 33a:	9a 99       	sbic	0x13, 2	; 19
 33c:	06 c0       	rjmp	.+12     	; 0x34a <button_touch_delay+0x30>
		{
			button_minute ++; //Переменнах хоанит задержку для настройки "Минут"
 33e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 348:	02 c0       	rjmp	.+4      	; 0x34e <button_touch_delay+0x34>
		}
		else button_minute = 0;
 34a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
		
		if (button_minute > button_delay)  //Обнуление переменной хранящей задержку "Минут" если кнопка настройки не нажата 
 34e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 352:	89 37       	cpi	r24, 0x79	; 121
 354:	10 f0       	brcs	.+4      	; 0x35a <button_touch_delay+0x40>
		{
			button_minute = 0;
 356:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 35a:	08 95       	ret

0000035c <__vector_9>:

unsigned char button_hour = 0;
unsigned char button_minute = 0;

ISR (TIMER0_OVF_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	segment_number++;
 37e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <segment_number>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <segment_number>
	
	if (segment_number >= 5)
 388:	85 30       	cpi	r24, 0x05	; 5
 38a:	18 f0       	brcs	.+6      	; 0x392 <__vector_9+0x36>
	{
		segment_number = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <segment_number>
	}
	
	button_touch_delay(); //Задержка срабатывания кнопок для настройки "Часов" и "Минут"
 392:	c3 df       	rcall	.-122    	; 0x31a <button_touch_delay>
	
	button(); //Функция обработки кнопок настройки часов
 394:	92 df       	rcall	.-220    	; 0x2ba <button>
	
	TCNT0 = number_TCNT0; //Записываем число 178 в регистр TCNT0, для получения интервала 2мс. Это интервал срабатывания прерывания по переполнению ТС0
 396:	81 ee       	ldi	r24, 0xE1	; 225
 398:	82 bf       	out	0x32, r24	; 50
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__udivmodsi4>:
 3bc:	a1 e2       	ldi	r26, 0x21	; 33
 3be:	1a 2e       	mov	r1, r26
 3c0:	aa 1b       	sub	r26, r26
 3c2:	bb 1b       	sub	r27, r27
 3c4:	fd 01       	movw	r30, r26
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <__udivmodsi4_ep>

000003c8 <__udivmodsi4_loop>:
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	ee 1f       	adc	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	a2 17       	cp	r26, r18
 3d2:	b3 07       	cpc	r27, r19
 3d4:	e4 07       	cpc	r30, r20
 3d6:	f5 07       	cpc	r31, r21
 3d8:	20 f0       	brcs	.+8      	; 0x3e2 <__udivmodsi4_ep>
 3da:	a2 1b       	sub	r26, r18
 3dc:	b3 0b       	sbc	r27, r19
 3de:	e4 0b       	sbc	r30, r20
 3e0:	f5 0b       	sbc	r31, r21

000003e2 <__udivmodsi4_ep>:
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	1a 94       	dec	r1
 3ec:	69 f7       	brne	.-38     	; 0x3c8 <__udivmodsi4_loop>
 3ee:	60 95       	com	r22
 3f0:	70 95       	com	r23
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	bd 01       	movw	r22, r26
 3fc:	cf 01       	movw	r24, r30
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
